#!/usr/bin/env python3
"""
Setup script for AI Paper Analysis API keys
"""

import os
import getpass
from pathlib import Path

def setup_api_keys():
    """Interactive setup for API keys"""
    print("üîë AI Paper Analysis - API Key Setup")
    print("=" * 50)
    print()
    
    print("This script will help you configure API keys for real AI analysis.")
    print("You can choose from:")
    print("1. OpenAI (GPT-4)")
    print("2. Anthropic (Claude)")
    print("3. Both")
    print("4. Skip (use placeholder analysis)")
    print()
    
    choice = input("Enter your choice (1-4): ").strip()
    
    if choice == "4":
        print("‚úÖ Skipping API setup. Placeholder analysis will be used.")
        return
    
    env_vars = []
    
    if choice in ["1", "3"]:
        print("\nüîµ OpenAI Setup")
        print("Get your API key from: https://platform.openai.com/api-keys")
        openai_key = getpass.getpass("Enter your OpenAI API key (sk-...): ").strip()
        
        if openai_key and openai_key.startswith('sk-'):
            env_vars.append(f"export OPENAI_API_KEY='{openai_key}'")
            print("‚úÖ OpenAI key configured")
        else:
            print("‚ùå Invalid OpenAI key format")
    
    if choice in ["2", "3"]:
        print("\nüü° Anthropic Setup")
        print("Get your API key from: https://console.anthropic.com/")
        anthropic_key = getpass.getpass("Enter your Anthropic API key: ").strip()
        
        if anthropic_key:
            env_vars.append(f"export ANTHROPIC_API_KEY='{anthropic_key}'")
            print("‚úÖ Anthropic key configured")
        else:
            print("‚ùå No Anthropic key provided")
    
    if env_vars:
        # Create or update .env file
        env_file = Path(".env")
        
        print(f"\nüìù Saving to {env_file}...")
        with open(env_file, 'w') as f:
            f.write("# AI Paper Analysis API Keys\n")
            f.write("# Generated by setup_api.py\n\n")
            for var in env_vars:
                f.write(var + "\n")
        
        print("‚úÖ API keys saved to .env file")
        print()
        print("üöÄ Next steps:")
        print("1. Run: source .env")
        print("2. Run: python paper_processor.py")
        print("3. Open: http://localhost:8000/viewer.html")
        print()
        print("üí° Tip: Add .env to .gitignore to keep your keys private")
        
        # Check if .gitignore exists and add .env if needed
        gitignore = Path(".gitignore")
        if gitignore.exists():
            content = gitignore.read_text()
            if ".env" not in content:
                with open(gitignore, 'a') as f:
                    f.write("\n# API Keys\n.env\n")
                print("‚úÖ Added .env to .gitignore")
        else:
            with open(gitignore, 'w') as f:
                f.write("# API Keys\n.env\n")
            print("‚úÖ Created .gitignore with .env")
    
    else:
        print("‚ùå No valid API keys configured")

def show_current_config():
    """Show current API configuration"""
    print("\nüìä Current Configuration:")
    
    openai_key = os.getenv('OPENAI_API_KEY')
    anthropic_key = os.getenv('ANTHROPIC_API_KEY')
    
    if openai_key:
        masked = openai_key[:6] + "‚Ä¢" * (len(openai_key) - 6)
        print(f"  OpenAI: {masked}")
    else:
        print("  OpenAI: Not configured")
    
    if anthropic_key:
        masked = anthropic_key[:6] + "‚Ä¢" * (len(anthropic_key) - 6)
        print(f"  Anthropic: {masked}")
    else:
        print("  Anthropic: Not configured")
    
    if not openai_key and not anthropic_key:
        print("  Status: Using placeholder analysis")
    else:
        print("  Status: Real AI analysis enabled")

if __name__ == "__main__":
    try:
        # Load existing .env if it exists
        env_file = Path(".env")
        if env_file.exists():
            print("üìÅ Found existing .env file")
            exec(open(env_file).read().replace('export ', '').replace("'", ""))
        
        show_current_config()
        print()
        
        setup_api_keys()
        
    except KeyboardInterrupt:
        print("\n\n‚ùå Setup cancelled")
    except Exception as e:
        print(f"\n‚ùå Error: {e}")